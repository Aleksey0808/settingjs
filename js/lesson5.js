// const car = {
//   brend: "skoda",
//   model: "octavia",
//   year: "2015",
// };

// const car2 = Object.create(car);
// car2.engine = "tdi";

// console.log(car2)
// console.log(car.isPrototypeOf('brend'));

// const Car = function ({brand, modal, price} = {}) {
//   this.brand = brand;
//   this.modal = modal;
//   this.price = price;

// };

// Car.prototype.sayHi = function () {
//   // console.log('Car.prototype.sayHi => this', this);
//   // console.log("Hello:")
// }
// // console.log(Car.prototype)

// Car.prototype.chengePrice = function (newPrice) {
//   this.price = newPrice;
// }

// const myCar = new Car({
//   brand: 'Audio',
//   modal: 'q3',
//   price: 35000,
// });

// myCar.chengePrice(45000)

// const myCar2 = new Car({
//   brand: 'Audio',
//   modal: 'a6',
//   price: 25000,
// })

// const myCar3 = new Car({
//   brand: 'bmw',
//   modal: 'x6',
//   price: 50000,
// })

// // console.log(Car);
// console.log(myCar);
// // console.log(myCar2);
// // console.log(myCar3);

// class Storage {
//   constructor(items) {
//     this.items = items;
//   };

//   getItems() {
//   return this.items;
// };


// addItem(newItem) {
//   return this.items.push(newItem);;
// };

// removeItem(itemToRemove) {

//   this.items = this.items.filter(item => item !== itemToRemove);
// };


// }


// // Change code above this line
// const storage = new Storage(["Nanitoids", "Prolonger", "Antigravitator"]);
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator"]
// storage.addItem("Droid");
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator", "Droid"]
// storage.removeItem("Prolonger");
// console.log(storage.getItems()); // ["Nanitoids", "Antigravitator", "Droid"]

// this
//task 1


// class Car {
//  static MAX_PRICE = 50000;
  
//   #price;

//   constructor({ price }) {
//     this.#price = price;
//   }

//   get price() {
//     return this.#price;
//   }

//   set price(newPrice) {
//    this.#price = newPrice <= Car.MAX_PRICE ? this.#price = newPrice : this.#price;
//   }
//   // Change code above this line
// }

// const audi = new Car({ price: 35000 });
// console.log(audi.price); // 35000

// audi.price = 49000;
// console.log(audi.price); // 49000

// audi.price = 51000;
// console.log(audi.price); // 49000

//this//////////////////////////////////////////////////

// Example 1 - –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
// –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥ calcTotalPrice(stoneName), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–Ω—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
// –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–º–Ω–µ–π —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º, —Ü–µ–Ω–æ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ stones.


// const chopShop = {
//   stones: [
//     { name: 'Emerald', price: 1300, quantity: 4 },
//     { name: 'Diamond', price: 2700, quantity: 3 },
//     { name: 'Sapphire', price: 1400, quantity: 7 },
//     { name: 'Ruby', price: 800, quantity: 2 },
//   ],
//   calcTotalPrice(stoneName) {
//    return this.stones.filter(stone => stone.name === stoneName)
//       .map(stone => stone.price * stone.quantity);
//   },
// };

// console.log(chopShop.calcTotalPrice('Emerald')); // 5200
// console.log(chopShop.calcTotalPrice('Diamond')); // 8100
// console.log(chopShop.calcTotalPrice('Sapphire')); // 9800
// console.log(chopShop.calcTotalPrice('Ruby')); // 1600

// Example 2 - –¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–∞ phonebook —á—Ç–æ–±—ã –∫–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–ª.

// const phonebook = {
//   contacts: [],
//   add(contact) {
//     const newContact = {
//       list: 'default',
//       ...contact,
//       id: this.generateId(),
//       createdAt: this.getDate(),
//     };
//     this.contacts.push(newContact);
//   },
//   generateId() {
//     return '_' + Math.random().toString(36).substr(2, 9);
//   },
//   getDate() {
//     return Date.now();
//   },
// };


  // phonebook.add({
  //   name: 'Mango',
  //   email: 'mango@mail.com',
  //   list: 'friends',
  // })

  // phonebook.add({
  //   name: 'Poly',
  //   email: 'poly@hotmail.com',
  // })


// console.log(phonebook);

// Example 3 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
// –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç calculator —Å —Ç—Ä–µ–º—è –º–µ—Ç–æ–¥–∞–º–∏:

// read(a, b)- –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞.
// add() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
// mult() - –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

// const calculator = {
//   a: 0,
//   b: 0,
//   read(a, b) {
//     this.a = a ?? 0;
//     this.b = b ?? 0;
//   },

//   add() {
//     return this.a + this.b;
//   },

//   mult() {
//      return this.a * this.b;
//   },
// };

// console.log(calculator.read(2, 4));
// console.log(calculator.add());
// console.log(calculator.mult());

// const user = {
//     name: 'Artem',
//     city: 'Lviv',
//     sayHello(year, language) {
//         // console.log(arguments);
//         console.log(`Hello my name ${this.name}, from ${this.city}, I'm ${year}, study ${language}`);
//     }
// }
// user.sayHello(28, "HTML")



// const den = {
//     name:'Den',
//     city: "Zhutomyr"
// }

// const kate = {
//     name: "Kate",
//     city: "Uzhgorod"
// }


// const alex = {
//     name: "ALex",
//     city: "Kyiv"
// }




// const args = [18, "CSS"]
// user.sayHello.call(den,22,"JS")
// user.sayHello.apply(kate,[18, "CSS"])
// user.sayHello.apply(kate,args)
// console.log(user.sayHello.bind(alex));
// const alexSay = user.sayHello.bind(alex)
// alexSay(33, "react.js")
// alexSay(34, 'Node.js')
// alexSay(11, 'Java')
// user.sayHello(28, "HTML")
// alexSay()
// console.log(alexSay);

// –ú–æ–¥—É–ª—å 5. –ó–∞–Ω—è—Ç–∏–µ 10. –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã –∏ –∫–ª–∞—Å—Å—ã////////////////////////

// Example 1 - –ë–ª–æ–≥–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Blogger –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ –±–ª–æ–≥–≥–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º–∏:

// email - –ø–æ—á—Ç–∞, —Å—Ç—Ä–æ–∫–∞
// age - –≤–æ–∑—Ä–∞—Å—Ç, —á–∏—Å–ª–æ
// numberOfPosts - –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å—Å–∏–≤ —Ç–µ–º –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–≥–≥–µ—Ä
// –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ getInfo(), –∫–æ—Ç–æ—Ä—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É: User ${–ø–æ—á—Ç–∞} is ${–≤–æ–∑—Ä–∞—Å—Ç} years old and has ${–∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤} posts.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ updatePostCount(value), –∫–æ—Ç–æ—Ä—ã–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ value –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

// class Blogger {
//   constructor({ email, age, numberOfPosts, topics } = {}) {
//     this.email = email;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }
  
//   getInfo() {
//     return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`
//   };

//   updatePostCount(value) {
//     this.numberOfPosts += value;
//   }

// }

// const mango = new Blogger({
//   email: 'mango@mail.com',
//   age: 24,
//   numberOfPosts: 20,
//   topics: ['tech', 'cooking'],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new Blogger({
//   email: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts


// Example 2 - –•—Ä–∞–Ω–∏–ª–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å
//  –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–≥–æ –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.

// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤.
// addItem(item) - –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Ç–µ–∫—É—â–∏–º.
// removeItem(item) - –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–µ–∫—É—â–∏—Ö.
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// class Storage {
//     constructor(items) {
//         this.items = items;

//     }
    
//     getItems() {
//        return this.items;
//     };

//     addItem(item) {
//         return this.items.push(item);
//     };

//     removeItem(item) {
//         this.items.includes(item) ? this.items.splice(1, this.items.indexOf(item)) : this.items
//     };

// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem('üçã');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å User –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ login –∏ email.
// –û–±—ä—è–≤–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ #login –∏ #email, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Å–¥–µ–ª–∞–π —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä –∏ —Å–µ—Ç—Ç–µ—Ä login –∏ email.

// class User {
//     #login;
//     #email;

//     constructor({login, email} = {}) {
//         this.#login = login;
//         this.#email = email;
//     }

//     get login() {
//         return this.#login;
//       }
    
//       set login(newLogin) {
//         this.#login = newLogin;
//       }

//       get email() {
//         return this.#email;
//       }
    
//       set email(newEmail) {
//         this.#email = newEmail;
//       }

// }

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie

// Example 4 - –ó–∞–º–µ—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Notes –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∑–∞–º–µ—Ç–æ–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items.
// –ó–∞–º–µ—Ç–∫–∞ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ text –∏ priority. –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ Priority,
//  –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥—ã addNote(note), removeNote(text) –∏ updatePriority(text, newPriority).

// class Notes{
//     static Priority = {
//           LOW: 'low',
//           NORMAL: 'normal',
//           HIGH: 'high'
//         }
//     constructor(items){
//         this.items = items;

//     }
//       addNote(note){
//         this.items.push(note)
//       }
            
//       removeNote(text) {
        
//         const element = this.items.find(value => value.text === text);
    
//         if (this.items.includes(element)) {
//           const index = this.items.indexOf(element);
//           this.items.splice(index, 1);
//             }
//   }
  
//       updatePriority(text, newPriority) {
//       return this.items.map(value => value.text === text ? value.priority = newPriority : value);
        
//         }
// }
// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({ text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.NORMAL, });
// console.log(myNotes.items);

// myNotes.addNote({ text: '–ú–æ—è —Ç—Ä–µ—Ç—è –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.HIGH, });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// console.log(myNotes.items);

// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);

// Example 5 - Toggle
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å Toggle –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ {isOpen: boolean}
// –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ on - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª/–≤—ã–∫–ª (true/false).
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ on –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false.


// class Toggle {
//     constructor( on = {isOpen: false} ) {
//         this.on = on;
//     }
// }

// const firstToggle = new Toggle({ 
//   isOpen: true 
// });
// console.log(firstToggle.on);

// const secondToggle = new Toggle({ 
//   isOpen: false 
// });

// console.log(secondToggle.on);




// __________________________________________ //
// -----------------------------------------TASK 1------------------------------------------//
// 1 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Å–ø–∏—Åo–∫ —ñ–º–µ–Ω —É—á–Ω—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
// 2 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∫—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
// 3 –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ—Ç–æ–¥ –æ–±'—î–∫—Ç—É —è–∫–∏–π –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ —ñ–º'—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –≤ —è–∫–æ–≥–æ –±—ñ–ª—å—à–µ –æ—á–∫—ñ–≤

// const hogvarts = {
//     griffindor: [{
//             name: "Harry",
//             points: 17
//         },
//         {
//             name: "Hermiona",
//             points: 19
//         },
//         {
//             name: "Ron",
//             points: 14
//         },
//     ],
//     sliserin: [{
//             name: "Draco",
//             points: 17
//         },
//         {
//             name: "Goyl",
//             points: 14
//         },
//         {
//             name: "Crabbe",
//             points: 5
//         },
//   ],
  //   universityFaculty(faculty) {
  //  return this.sliserin.map(hogvart => hogvart.name)
  // },
  // universityPoints(points) {
  //     return this.sliserin.reduce((total, point) => total += point.points, 0)
  //   },
//   universityFirstPoints(faculty1, faculty2) {
//     const facult1 = this.griffindor.reduce((total, point) => total += point.points, 0)
//     const facult2 = this.sliserin.reduce((total, point) => total += point.points, 0)
//     return facult1 > facult2 ? facult1 : facult2
//     },
// }

// console.log(hogvarts.universityFaculty(hogvarts.sliserin));
// console.log(hogvarts.universityPoints(hogvarts.sliserin)); 
// console.log(hogvarts.universityFirstPoints(hogvarts.griffindor, hogvarts.sliserin)); 


// -----------------------------------------TASK 2------------------------------------------//
// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
// 1 –ú–∞—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
// 2 –ú–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –≤–∏–≤—á–∞—é—Ç—å —Ü—é –º–æ–≤—É.

// const students = [{
//     name: `Lika`,
//     language: `html`

// }, {
//     name: `Anton`,
//     language: `css`

// }, {
//     name: `Andriy`,
//     language: `js`

// }, {
//     name: `Vova`,
//     language: `html`

// }, {
//     name: `Alina`,
//     language: `css`

// }, {
//     name: `Egor`,
//     language: `js`

// }, {
//     name: `Aleksandr`,
//     langunage: `html`

// }, {
//     name: `Taras`,
//     language: `css`

// }, {
//     name: `Ivan`,
//     language: `js`

// }, {
//     name: `Make`,
//     language: `html`

// }, ];


// const programming = function(student, lang) {
//   return student.filter(student => student.language === lang).map(name => name.name)
// };

// console.log(programming(students, `js`));



// -----------------------------------------TASK 3------------------------------------------//
// // –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–æ–±–∏–≤ –∫–æ–∂–µ–Ω  —é–∑–µ—Ä
// // (—Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
// // 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤
// // 2 –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ–º—è —Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
// // –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∑–∞—Ä–æ–±–∏–≤ (salary*month) )

// // –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤—Å—ñ—Ö —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤()
// // (—Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É –≤—Å—ñ—Ö —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤);

// const workers = [{
//         name: 'Alex',
//         salary: 3500,
//         month: 12,
//     },
//     {
//         name: 'Dima',
//         salary: 2500,
//         month: 9,
//     },
//     {
//         name: 'Oleg',
//         salary: 1500,
//         month: 36,
//     },
// ];

// const totalSalary = function(array, name) {
  // return array.filter(person => person.name === name).map(sal => sal.salary * sal.month)
  
// }

// console.log(totalSalary(workers, 'Alex'))
// console.log(totalSalary(workers, 'Dima'))
// console.log(totalSalary(workers, 'Oleg'))

// const totalSalary = function(array) {
  
//   return array.reduce((total, sal) => total += sal.salary * sal.month, 0)
// }

// console.log(totalSalary(workers))




// -----------------------------------------TASK 4------------------------------------------//
// 1 –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
//    1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤
//    2 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–∑–≤–∞ –∫–Ω–∏–≥–∏
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ü–º–µ–Ω–∞ —é–∑–µ—Ä—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä—ñ–Ω–≥–∏) –≤ —è–∫–∏—Ö —î —Ü—è –∫–Ω–∏–≥–∞ ("Harry Potter") \\\ "Anna, Oleksii"

// 2 –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–∫ –≤—Å—ñ—Ö —é–∑–µ—Ä—ñ–≤ —É —è–∫–∏—Ö —î –∫–ª—é—á age.

// const friends = [{ name: "Anna", books: ["Bible", "Harry Potter"], age: 21 },
//     { name: "Bob", books: ["War and peace", "Romeo and Juliet"], age: 26 },
//     { name: "Alice", books: ["War and peace", "Romeo and Juliet"]},
//     { name: "Oleksii", books: ["Bible","War and peace","Harry Potter",  "Romeo and Juliet"], age: 26},
// ]

// const userName = function(array, nameBook) {
//  return array.filter(book => book.books.includes(nameBook)).map(user => user.name)
// }

// console.log(userName(friends, "Harry Potter"))

// const userName = function(array) {
//   return array.filter((user) => user.age).reduce((total, user) => total += user.age, 0)
//  }

// console.log(userName(friends))



// -----------------------------------------TASK 5------------------------------------------//
// –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ 4 –º–µ—Ç–æ–¥–∏ –æ–±'—î–∫—Ç—É
// 1 –≤–∏–≤–æ–¥–∏—Ç—å —Å—É–º—É –Ω–∞ –∫–∞—Ä—Ç—ñ (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt())
// 2 –¥–æ–¥–∞—î –Ω–æ–≤—É –∫–∞—Ä—Ç—É (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt())
// 3 –∑–Ω—è—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt() —Ç–∞ —Å—É–º—É –≤ prompt())
// 4 –¥–æ–¥–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É (–Ω–∞–∑–≤—É –≤–≤–æ–¥–∏–º–æ –≤ prompt() —Ç–∞ —Å—É–º—É –≤ prompt())

// const bankSystem = {
//   privat: 1000,
//   mono: 1500,
//   balance() {
//     const bank = prompt(`–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É`);
//     if (bankSystem.hasOwnProperty(bank)) {
//       alert(bankSystem[bank]);
//     } else {
//       alert(`–í —Ç–µ–±–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ –≤ —Ç–∞–∫–æ–º—É –±–∞–Ω–∫—É, —á—É–≤–∞–∫`);
//     }
//   },
//   addNewCount() {
//     const bank = prompt(`–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É`);
//     const sum = prompt(`–≤–≤–µ–¥—ñ—Ç—å –∑–∞–ª–∏—à–æ–∫ –¥–∞–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏)`);
//     bankSystem[bank] = Number(sum);
//   },

// };
// console.log(bankSystem.upAmount(prompt("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")));
// console.log(bankSystem.addCard(prompt("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")));

// const bankSystem = {
//   privat: 1000,
//   mono: 1500,
//   balance() {
//     const bank = prompt(`–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É`);
//     if (bankSystem.hasOwnProperty(bank)) {
//       alert(bankSystem[bank]);
//     } else {
//       alert(`–í —Ç–µ–±–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ –≤ —Ç–∞–∫–æ–º—É –±–∞–Ω–∫—É, —á—É–≤–∞–∫`);
//     }
//   },
//   addNewCount() {
//     const bank = prompt(`–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É`);
//     const sum = prompt(`–≤–≤–µ–¥—ñ—Ç—å –∑–∞–ª–∏—à–æ–∫ –¥–∞–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏)`);
//     bankSystem[bank] = Number(sum);
//   },

//   withdrawal() {
//     const bank = prompt(`–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É`);
//     const sum = prompt(`–≤–≤–µ–¥—ñ—Ç—å c—É–º—É, –∫–æ—Ç—Ä—É –∑–Ω—è–ª–∏ (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏)`);
//     if (bankSystem.hasOwnProperty(bank)) {
//       bankSystem[bank] = bankSystem[bank] - Number(sum);
//       alert(`${bank} ${bankSystem[bank]}`);
//       console.log(bankSystem[bank]);
//     } else {
//       alert(`–í —Ç–µ–±–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ –≤ —Ç–∞–∫–æ–º—É –±–∞–Ω–∫—É, —á—É–≤–∞–∫`);
//     }
//   },
// };
// bankSystem.withdrawal();
// bankSystem.balance();
// bankSystem.addNewCount();
// console.table(bankSystem);


// -----------------------------------------TASK 6------------------------------------------//
// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ —à—É–∫–∞—Ç–∏ –Ω–∞—Ä—Ü–∏—Å–∞. –ì–æ–ª–æ–≤–Ω–∞ —É–º–æ–≤–∞ –Ω–∞—Ä—Ü–∏—Å–∞ –∑–Ω–∞—é—Ç—å –≤—Å—ñ, –Ω–∞—Ä—Ü–∏—Å –Ω–µ –∑–Ω–∞—î –Ω—ñ–∫–æ–≥–æ.

// const people1 = [{
//         name: 'Alex',
//         know: ['Eva', 'Jhon'],
//     },
//     {
//         name: 'Ivan',
//         know: ['Jhon', 'Alex']
//     },
//     {
//         name: 'Eva',
//         know: ['Alex','Jhon']
//     },
//     {
//         name: 'Jhon',
//         know: [Alex]
//     },
// ] //Not found

// const people2 = [{
//         name: 'Alex',
//         know: ['Eva', 'Jhon'],
//     },
//     {
//         name: 'Jhon',
//         know: []
//     },
//     {
//         name: 'Eva',
//         know: []
//     },
//     {
//         name: 'Ivan',
//         know: ['Jhon', 'Alex']
//     },
// ];// Not found


// const people3 = [{
//         name: 'Alex',
//         know: ['Eva', 'Jhon'],
//     },
//     {
//         name: 'Jhon',
//         know: []
//     },
//     {
//         name: 'Eva',
//         know: ['Alex', 'Jhon']
//     },
//     {
//         name: 'Ivan',
//         know: ['Jhon', 'Alex']
//     },
// ]; // Jhon


// -----------------------------------------TASK 7------------------------------------------//
// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –º—É—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
// –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ —è–∫—â–æ –≤—ñ–Ω –º–∞—î –æ–±'—î–∫—Ç–∏ –≤ —è–∫–∏—Ö –¥—É–±–ª—é—é—Ç—å—Å—è –∞–π–¥—ñ —Ç–æ –∫–≤–æ–Ω—Ç—ñ—Ç—ñ —Ü–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ 
// –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–ª—é—Å—É–≤–∞—Ç–∏ 
// –∞ —Ç—ñ –æ–±—î'–∫—Ç–∏ –≤ —è–∫–∏—Ö –∞–π–¥—ñ —Å–ø—ñ–≤–ø–∞–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–∞—Å–∏–≤—É.
// (–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—É—Ç—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

const products = [{
  id: 'sku1',
  qty: 1,
}, {
  id: 'sku2',
  qty: 2,
}, {
  id: 'sku3',
  qty: 3,
}, {
  id: 'sku1',
  qty: 6,
}, {
  id: 'sku1',
  qty: 8,
}, {
  id: 'sku2',
  qty: 19,
}, {
  id: 'sku4',
  qty: 1,
  }];

  console.log(products.reduce((s, i) => s = s + i.qty, 0));

  let duplicateIds = [];

let new_data = products.map((e,i,a) => {  
  if (a.filter((item, ind) => i !== ind).some(item => item.id === e.id)) {
    e.qty += e.qty;
    return e;
  } else {
    duplicateIds.push(e);
    return e;
  } 
});

// console.log(new_data);
// console.log(duplicateIds);

// const res = products.reduce((o, i) => {
//   if (!o.find(v => v.id === i.id)) {
//     i.qty += 100
//     o.push(i);
//   }
//   return o;
// }, []);
// console.log(res)


const newFoo = function (array) {

  // const table = {};
  // const res = array.filter(({id, qty}) =>(!table[id] && (table[id] = 1)));
  // return res
  // return array.reduce((acc, {id, qty}) => (!acc[id] && (acc[id] = 1)), {} )
};

// console.log(newFoo(products));


const res = products.reduce((o, i) => {
  if (!o.find(v => v.id === i.id)) {
    // o += i.qty
    o.push(i);
  }
  return o;
}, []);
console.log(res)

// const imgRev = images.map(item => {
//   const liEl = document.createElement('li');
//   const imageEl = document.createElement('img');
//   imageEl.src = item.url;
//   imageEl.alt = item.alt;
//   liEl.append(imageEl);
//   return liEl;
// })


// imgEl.append(...imgRev);

// console.log(imgEl)

// function fprod(arrProds) {
//   arrProds.forEach(product => {
//     arrProds.reduce((acc, item) => {
//       if (acc.id === item.id && acc != item && acc.qty != 0) {
//         acc.qty += item.qty;
//         item.qty = 0;
//       }
//       return acc;
//     }, product);
//   });
//   return arrProds.filter(item => item.qty != 0);
// }



